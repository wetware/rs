name: Rust CI/CD

on:
  push:
    branches: [ "master", "lthibault" ]
  pull_request:
    branches: [ "master", "lthibault" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: x86_64-unknown-linux-gnu
        
    - name: Install Cap'n Proto compiler
      run: |
        sudo apt-get update
        sudo apt-get install -y capnproto
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
          
    - name: Check formatting
      run: cargo fmt --all -- --check
      
    - name: Run clippy
      run: cargo clippy -- -D warnings
      
    - name: Run tests
      run: cargo test --verbose
      
    - name: Build release
      run: cargo build --release

  build-and-publish:
    name: Build and Publish
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'release'
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: x86_64-unknown-linux-gnu
        
    - name: Install Cap'n Proto compiler
      run: |
        sudo apt-get update
        sudo apt-get install -y capnproto
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
          
    - name: Build release
      run: cargo build --release
      
    - name: Create release artifacts
      run: |
        mkdir -p dist
        cp target/release/ww dist/ww-linux-x86_64
        tar -czf dist/ww-linux-x86_64.tar.gz -C target/release ww
        
    - name: Upload release artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-artifacts
        path: dist/
        
    - name: Build Podman image
      run: |
        podman build -t wetware:${{ github.event.release.tag_name }} .
        podman tag wetware:${{ github.event.release.tag_name }} wetware:latest
        
    - name: Set up Podman Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.CONTAINER_USERNAME }}
        password: ${{ secrets.CONTAINER_PASSWORD }}
        
    - name: Push Container image
      run: |
        podman push wetware:${{ github.event.release.tag_name }}
        podman push wetware:latest

  container-build:
    name: Build Container Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Podman Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Container image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: wetware:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
